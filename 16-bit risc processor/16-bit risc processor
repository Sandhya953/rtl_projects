module alu(
input  [3:0]  alu_op,     // ALU operation code
    input  [15:0] a,          // Operand A
    input  [15:0] b,          // Operand B
    output reg [15:0] result, // ALU result
    output reg zero_flag,     // Result == 0
    output reg carry_flag,    // Carry out for add/sub
    output reg lt_flag        // Less than flag (a < b)
    );
    always @(*) begin
    // Default values
    result = 16'b0;
    zero_flag = 0;
    carry_flag = 0;
    lt_flag = 0;

    case (alu_op)
        4'b0000: begin // ADD
            {carry_flag, result} = a + b;
        end

        4'b0001: begin // SUB
            {carry_flag, result} = a - b;
        end

        4'b0010: begin // AND
            result = a & b;
        end

        4'b0011: begin // OR
            result = a | b;
        end

        4'b0100: begin // XOR
            result = a ^ b;
        end

        4'b0101: begin // NOT (only on A)
            result = ~a;
        end

        4'b0110: begin // Shift Left
            result = a << 1;
        end

        4'b0111: begin // Shift Right
            result = a >> 1;
        end

        4'b1000: begin // Compare Equal
            result = (a == b) ? 16'd1 : 16'd0;
            zero_flag = (a == b);
        end

        4'b1001: begin // Compare Less Than
            result = (a < b) ? 16'd1 : 16'd0;
            lt_flag = (a < b);
        end

        default: begin
            result = 16'd0;
        end
    endcase

    // Set zero flag
    if (result == 0)
        zero_flag = 1;
        end
        endmodule
